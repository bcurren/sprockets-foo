require "test_helper"

class PreprocessorTest < Test::Unit::TestCase
  def setup
    @environment  = environment_for_fixtures
    @preprocessor = Sprockets::Preprocessor.new(@environment, :strip_comments => false)
  end
  
  def test_requiring_a_template_with_namespace_should_compile_then_require
    require_file_for_this_test
    assert_concatenation_contains <<-LINES
      var before_template;
      // Autogenerated from an Ejs file. Edits may be lost.
      
      
      window.or = window.or || {};
      window.or.ui = window.or.ui || {};
      window.or.ui.MyNamespacedTemplate = window.or.ui.MyNamespacedTemplate || {};
      or.ui.MyNamespacedTemplate.render = function(options) {
        var p = [];
        with(options) {
          p.push('<p>Content</p>\\n');
        }
        return p.join('');
      }
      var after_template;
    LINES
  end
  
  def test_requiring_a_template_should_compile_then_require
    require_file_for_this_test
    assert_concatenation_contains <<-LINES
      var before_template;
      // Autogenerated from an Ejs file. Edits may be lost.
      
      
      window.MyTemplate = window.MyTemplate || {};
      MyTemplate.render = function(options) {
        var p = [];
        with(options) {
          p.push('<p>Content</p>\\n');
        }
        return p.join('');
      }
      var after_template;
    LINES
  end
  
  protected
  
    attr_reader :environment, :preprocessor
    
    def require_file_for_this_test
      require_file(file_for_this_test)
    end
    
    def require_file(location)
      preprocessor.require(environment.find(location).source_file)
    end
    
    def assert_concatenation_contains(indented_text)
      lines = indented_text.split($/)
      initial_indent  = lines.first[/^\s*/].length
      unindented_text = lines.map { |line| line[initial_indent..-1] }.join($/)
      output_text[unindented_text]
      
      assert output_text[unindented_text]
    end
    
    def assert_concatenation_contains_line(line)
      assert source_lines_matching(line).any?, "Expected #{line.inspect} to exist"
    end
    
    def source_lines_matching(line)
      concatenation.lines.select { |l| l.strip == line }
    end
    
    def concatenation
      preprocessor.concatenation
    end
    
    def output_text
      preprocessor.concatenation.to_s
    end
    
    def file_for_this_test
      caller.map { |c| c[/`(.*?)'$/, 1] }.grep(/^test_/).first[5..-1] + ".js"
    end
    
    def assert_concatenation_does_not_contain_line(line)
      assert source_lines_matching(line).empty?, "Expected #{line.inspect} not to exist"
    end
end
